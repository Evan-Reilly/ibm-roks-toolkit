---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: user-manifests-bootstrapper
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: user-manifests-bootstrapper
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: edit
subjects:
  - kind: ServiceAccount
    name: user-manifests-bootstrapper
---
apiVersion: v1
kind: Pod
metadata:
  name: manifests-bootstrapper
spec:
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        preference:
          matchExpressions:
          - key: dedicated
            operator: In
            values:
            - master-{{ .ClusterID }}
  tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "master-{{ .ClusterID }}"
      effect: NoSchedule
    - key: "multi-az-worker"
      operator: "Equal"
      value: "true"
      effect: NoSchedule
  initContainers:
    - image: {{ .ReleaseImage }}
      imagePullPolicy: IfNotPresent
      name: cluster-version-operator
{{- if .ClusterVersionOperatorSecurityContext }}
{{- $securityContext := .ClusterVersionOperatorSecurityContext }}
      securityContext:
        runAsUser: {{ $securityContext.RunAsUser }}
{{- end }}
      workingDir: /tmp
      command:
        - /bin/bash
      args:
        - -c
        - |-
          cd /tmp
          mkdir -p output/manifests output/bootstrap
          /usr/bin/cluster-version-operator render --output-dir /tmp/output --release-image {{ .ReleaseImage }}
          # Exclude the CVO deployment manifest
          rm /tmp/output/manifests/0000_00_cluster-version-operator*deployment.yaml
          cp /tmp/output/manifests/* /work
          # Exclude NoUpgrade CRDs which are not GA
          rm /release-manifests/*NoUpgrade.crd.yaml
          # Add machineconfig CRDs to prevent upgrade getting stuck
          cp /release-manifests/*machine-config*machineconfig*.crd.yaml /work
      volumeMounts:
        - mountPath: /work
          name: work
  containers:
    - image: {{ imageFor "cli" }}
      imagePullPolicy: IfNotPresent
      name: bootstrapper
{{- if .ManifestBootstrapperSecurityContext }}
{{- $securityContext := .ManifestBootstrapperSecurityContext }}
      securityContext:
        runAsUser: {{ $securityContext.RunAsUser }}
{{- end }}
      workingDir: /work
      command:
        - /bin/bash
      args:
        - -c
        - |-
          #!/bin/bash
          set -eu
          for name in $(oc get cm | grep '^user-manifest-' | awk '{ print $1 }'); do
             oc get cm ${name} -o jsonpath='{ .data.data }' > "${name}.yaml"
          done
          oc get secret user-manifest-openshift-browser-client -ojsonpath='{ .data.data }' | base64 -d > "user-manifest-openshift-browser-client.yaml"
          export KUBECONFIG=/etc/openshift/kubeconfig
          # Do not apply cluster version resource if already exists.
          oc get ClusterVersion version && rm user-manifest-cluster-version.yaml
          oc apply -f $(pwd)
          # Replace the global certs configmap here because it's too large to oc apply
          oc create configmap -n openshift-controller-manager openshift-global-ca --from-file ca-bundle.crt=/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem --dry-run=client -o yaml > /tmp/openshift-global-ca
          oc replace -n openshift-controller-manager -f /tmp/openshift-global-ca --force
      resources:
        requests:
          memory: "75Mi"
          cpu: "10m"
      volumeMounts:
        - mountPath: /etc/openshift
          name: kubeconfig
          readOnly: true
        - mountPath: /work
          name: work
  restartPolicy: OnFailure
  serviceAccountName: user-manifests-bootstrapper
  volumes:
    - name: kubeconfig
      secret:
        secretName: service-network-admin-kubeconfig
        defaultMode: 0640
    - name: work
      emptyDir: {}
